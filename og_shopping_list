from PySide6.QtWidgets import (QApplication, QMainWindow, QPushButton, 
                              QListWidget, QLineEdit, QVBoxLayout, 
                              QWidget, QHBoxLayout, QMessageBox)
import json
import os

class NotesApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("My Notes")
        self.setGeometry(100, 100, 400, 500)

        self.main_widget = QWidget()
        self.setCentralWidget(self.main_widget)
        self.layout = QVBoxLayout(self.main_widget)

        self.text_input = QLineEdit()
        self.text_input.setPlaceholderText("Type your note here...")

        self.add_button = QPushButton("Add Note")
        self.add_button.clicked.connect(self.add_note)

        input_row = QHBoxLayout()
        input_row.addWidget(self.text_input)
        input_row.addWidget(self.add_button)
        
        self.notes_list = QListWidget()
        self.notes_list.setSelectionMode(QListWidget.SelectionMode.MultiSelection)

        self.delete_button = QPushButton("Delete Selected")
        self.delete_button.clicked.connect(self.delete_notes)
        
        self.select_all_button = QPushButton("Select All")
        self.select_all_button.clicked.connect(self.select_all)
        
        self.clear_selection_button = QPushButton("Clear Selection")
        self.clear_selection_button.clicked.connect(self.clear_selection)
        
        button_row = QHBoxLayout()
        button_row.addWidget(self.select_all_button)
        button_row.addWidget(self.clear_selection_button)
        button_row.addWidget(self.delete_button)

        self.layout.addLayout(input_row)
        self.layout.addWidget(self.notes_list)
        self.layout.addLayout(button_row)
        
        self.load_notes()
        
        self.text_input.returnPressed.connect(self.add_note)

    def add_note(self):
        note_text = self.text_input.text().strip()

        if note_text:
            self.notes_list.addItem(note_text)
            self.text_input.clear()
            self.save_notes()
            self.notes_list.sortItems()

    def delete_notes(self):
        selected_notes = self.notes_list.selectedItems()
        
        if not selected_notes:
            QMessageBox.information(self, "Oops!", "Please select notes to delete")
            return

        msg = f"Do you want to delete {len(selected_notes)} note(s)?"
        answer = QMessageBox.question(self, "Confirm Delete", msg)

        if answer == QMessageBox.Yes:
            for note in selected_notes:
                self.notes_list.takeItem(self.notes_list.row(note))
            self.save_notes()
            self.notes_list.sortItems()

    def select_all(self):
        self.notes_list.selectAll()

    def clear_selection(self):
        self.notes_list.clearSelection()

    def save_notes(self):
        notes = []
        for i in range(self.notes_list.count()):
            notes.append(self.notes_list.item(i).text())

        with open('my_notes.json', 'w') as file:
            json.dump(notes, file)

    def load_notes(self):
        try:
            if os.path.exists('my_notes.json'):
                with open('my_notes.json', 'r') as file:
                    notes = json.load(file)
                    self.notes_list.addItems(notes)
                    self.notes_list.sortItems()
        except Exception as e:
            print(f"Couldn't load notes: {e}")

    def closeEvent(self, event):
        self.save_notes()
        super().closeEvent(event)

if __name__ == "__main__":
    app = QApplication([])
    notes_app = NotesApp()
    notes_app.show()
    app.exec()